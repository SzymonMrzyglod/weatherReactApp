{"version":3,"sources":["components/WeatherForm/WeatherForm.js","components/WeatherResult/WeatherResult.js","components/Application/App.js","reportWebVitals.js","index.js"],"names":["WeatherResult","props","className","onChange","placeholder","type","value","WeatherForm","weather","error","city","date","sunrise","sunset","temp","wind","pressure","content","timeSunrise","Date","toLocaleTimeString","timeSunset","KEYApi","App","state","fetchWeather","API","fetch","then","response","ok","Error","json","data","toLocaleString","console","log","setState","prevState","sys","main","speed","catch","handleInputChange","event","target","prevProps","this","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f9704b7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './WeatherForm.css'\r\n\r\nconst WeatherResult = props => {\r\n    return (\r\n        <>\r\n        <h1 className=\"form-title\">Aktualna pogoda</h1>\r\n        <form className=\"form\">\r\n            <input \r\n            className='form-input'\r\n            onChange={props.onChange}\r\n            placeholder=\"Wpisz miasto...\"\r\n            type=\"text\" \r\n            value={props.value}\r\n            />\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherResult;","import React from \"react\";\r\nimport './WeatherResult.css';\r\n\r\nconst WeatherForm = props => {\r\n    const {error, city, date, sunrise, sunset, temp, wind, pressure} = props.weather;\r\n\r\n    let content = null;\r\n\r\n    if(!error && city){\r\n        const timeSunrise = new Date(sunrise * 1000).toLocaleTimeString();\r\n        const timeSunset = new Date(sunset * 1000).toLocaleTimeString();\r\n        content = (\r\n            <>\r\n                <h2 className=\"result-city\">{city}</h2>\r\n                <p>Data i godzina: <strong>{date}</strong></p>\r\n                <p>Temperatura: <strong>{temp} &#176;C</strong> </p>\r\n                <p>Ciśnienie: <strong>{pressure} hPa</strong></p>\r\n                <p>Prędkość wiatru: <strong>{wind} m/s</strong></p>\r\n                <p>Wschód słońca: <strong>{timeSunrise}</strong></p>\r\n                <p>Zachód słońca: <strong>{timeSunset}</strong></p> \r\n            </> \r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className='result'>\r\n            {error ? `Brak miasta ${city} w bazie!` : content}\r\n        </div>    \r\n    )\r\n}\r\n\r\nexport default WeatherForm;","import React, {Component} from 'react';\nimport './App.css';\nimport WeatherForm from '../WeatherForm/WeatherForm'\nimport WeatherResult from '../WeatherResult/WeatherResult'\n\nconst KEYApi = 'ef39c9d59e30776fa6c28a91fd47f445';\n\nclass App extends Component{\n  state = {\n    value: '',\n    date: '',\n    city: '',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    wind: '',\n    pressure: '',\n    error: false\n  }\n\n  fetchWeather = () => {\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${KEYApi}&units=metric`;\n    \n    fetch(API)\n    .then(response => {\n      if(response.ok){\n        return response;\n      }\n      throw Error('Błąd...')\n    })\n    .then(response => response.json())\n    .then(data => {\n      const date = new Date().toLocaleString();\n      console.log(date)\n      this.setState(prevState => ({\n        date,\n        city: prevState.value,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset,\n        temp: data.main.temp,\n        wind: data.wind.speed,\n        pressure: data.main.pressure,\n        error: false\n      }))\n    })\n    .catch(error => {\n      console.log(error)\n      this.setState(prevState => ({\n        error: true,\n        city: prevState.value\n      }))\n    })\n  }\n\n  handleInputChange = event => {\n    this.setState({\n      value: event.target.value\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(prevState.value)\n    if(this.state.value.length === 1 ) return;\n    if(prevState.value !== this.state.value){\n      this.fetchWeather()\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"app\">\n        <div className='app-container'>\n        <WeatherForm \n        value={this.state.value} \n        onChange={this.handleInputChange}\n        />\n        <WeatherResult \n        weather={this.state}\n        />  \n       </div>\n      </div>\n\n\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/Application/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}